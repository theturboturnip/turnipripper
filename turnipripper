#!/usr/bin/env python3

"""
Concept:

rip <device> <disc name guess> <src directory>
metadata_edit <src directory>
encode <src directory>

"""

import libturnipripper.CDDB
import libturnipripper.data
import libturnipripper.ripping
import configparser
import argparse
import re
import os.path

class NamedRegex:
    def __init__(self, name, pattern):
        self.regex = re.compile(pattern)
        self.name = name

    def match(self, string):
        return self.regex.fullmatch(string)
        
    def __str__(self):
        return self.name
        
def y_n_input(query):
    while True:
        answer = input("{} y/n: ".format(query)).strip().lower()
        if answer[0] == 'y':
            return True
        elif answer[0] == 'n':
            return False
        print("Invalid Input")
def string_value_input(query, options):
    while True:
        answer = input("{0} {1}: ".format(query, "/".join([str(x) for x in options])))
        for option in options:
            if isinstance(option, NamedRegex):
                match = option.match(answer)
                if match is not None:
                    return match
            elif answer.strip().lower() == option.strip().lower():
                return option # Return the original value of the option so the calling code can use it
        print("Invalid Input")
def number_range_input(query, range_min = 0, range_max = -1):
    while True:
        if (range_max > 0):
            answer = input("{0} {1}-{2}: ".format(query, range_min, range_max))
        elif (range_min >= 0):
            answer = input("{0} {1}+: ".format(query, range_min))
        else:
            answer = input("{0} (numeric): ".format(query))
        try:
            int_answer = int(answer)
        except ValueError:
            print("Invalid Input (Not an integer)")
            continue
        if range_max > 0 and int_answer > range_max:
            print("Invalid Input (Too Large)")
            continue
        elif range_min >= 0 and int_answer < range_min:
            print("Invalid Input (Too Small)")
            continue
        return int_answer
            
            
def select_cd_info_with_user_input(disc_info, cddb_interfaces):

    # Array of arrays of data.CDInfo. known_definitions[X][Y] is the Xth interface's Yth definition for this CD.
    known_definitions = []

    def select_cd_from_definition(definition_list, zero_action):
        print("0 to {}".format(zero_action))
        for (index, cd_info) in enumerate(definition_list):
            print("{0:d}: {1}".format(index + 1, cd_info.title))
        while True:
            selected_cd = number_range_input("", 0, len(definition_list))
            if selected_cd == 0:
                return False
            return definition_list[selected_cd - 1]
    
    def select_known_cd_definition():
        while True:
            selected_server = number_range_input("Server (0 to cancel)", 0, len(known_definitions))
            if selected_server == 0:
                return False
            definition_list = known_definitions[selected_server - 1]
            len_definition_list = len(definition_list)
            if definition_list == None or len_definition_list == 0:
                print("That server has no definitions!")
                continue
            print("Select CD")
            selected_definition = select_cd_from_definition(definition_list, zero_action="cancel")
            if not selected_definition:
                continue
            return selected_definition

    has_any_definitions = False
    base_definition = None
    for (index, cddb_interface) in enumerate(cddb_interfaces):
        print ("Querying CD definitions for {} from {}...".format(disc_info, cddb_interface.server.address))
        known_definitions.append(libturnipripper.CDDB.get_cd_info(cddb_interface, disc_info))
        if known_definitions[index] == None or len(known_definitions[index]) == 0:
            print("No definitions for CD ID {0} on {1}, searching next server...".format(disc_info.cddb_id, cddb_interface.server.address))
            continue
        elif len(known_definitions[index]) == 1:
            has_any_definitions = True
            print("Found definition from {}:".format(cddb_interface.server.address))
            print(known_definitions[index][0])
            if y_n_input("Use this definition as a base?"):
                base_definition = known_definitions[index][0]
                break
        else:
            has_any_definitions = True
            print("Found {} definitions from {}:".format(len(known_definitions[index]), cddb_interface.server.address))
            selected_definition = select_cd_from_definition(known_definitions[index], zero_action="select none")
            if selected_definition:
                base_definition = selected_definition
                break

        if index > 0 and y_n_input("Select a previous definition?"):
            base_definition = select_known_cd_definition()
            break

    if base_definition == None:
        if has_any_definitions:
            print("Select a definition")
            base_definition = select_known_cd_definition()
            if not base_definition:
                return False
        else:
            if not y_n_input("No definitions found, use a blank definition as a base?"):
                return False
            base_definition = libturnipripper.data.CDInfo.create_null(disc_info)
          
    final_definition = base_definition

    track_pattern = "Track ("
    for i in range(len(final_definition.tracks)):
        if i != 0:
            track_pattern += "|"
        track_pattern += str(i + 1)
    track_pattern += ")"
    track_regex = NamedRegex("Track N", track_pattern)
            
    while True:
        print("Final Definition:")
        print(final_definition)
        edit_options = ["Title", "Artist", track_regex, "None"]
        option_to_edit = string_value_input("Choose a value to edit", edit_options)
        if option_to_edit == "None":
            return final_definition
        elif option_to_edit == "Title":
            final_definition.title = input("New Title [{}]: ".format(final_definition.title)).strip()
        elif option_to_edit == "Artist":
            final_definition.artist = input("New Artist [{}]: ".format(final_definition.artist)).strip()
        elif not isinstance(option_to_edit, str) and option_to_edit.re == track_regex.regex:
            #track_to_edit = number_range_input("Edit which track? (0 to cancel)", 0, len(final_definition.tracks))
            #if track_to_edit == 0:
            #    continue
            track_to_edit = int(option_to_edit.group(1))
            final_definition.tracks[track_to_edit - 1] = input("New Track [{}]: ".format(final_definition.tracks[track_to_edit - 1])).strip()
            #track_source_options = ["Server", "Manual"]
            #track_source = 
                
            
def main():
    # Parse any conf_file specification
    # We make this parser with add_help=False so that
    # it doesn't parse -h and print help.
    conf_parser = argparse.ArgumentParser(
        description=__doc__, # printed with -h/--help
        # Don't mess with format of description
        formatter_class=argparse.RawDescriptionHelpFormatter,
        # Turn off help, so we print all options in response to -h
        add_help=False
    )
    conf_parser.add_argument("-c", "--config_file",
                             help="Specify config file", metavar="FILE")
    args, remaining_argv = conf_parser.parse_known_args()

    defaults = { "option":"default" }
    
    config_files = ["~/.turnipripper", "./.turnipripper"]
    if args.config_file:
        config_files.append(args.config_file)
    config = configparser.SafeConfigParser()
    config.read(config_files)
    defaults.update(dict(config.items("DEFAULT")))

    # Parse rest of arguments
    # Don't suppress add_help here so it will handle -h
    parser = argparse.ArgumentParser(
        # Inherit options from config_parser
        parents=[conf_parser],
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
    parser.add_argument("-s", "--server_config_file", action="append", default=[],
                             help="Add a server config file", metavar="FILE")
    parser.add_argument("-p", "--protocol", type=int, default=6,
                             help="Set the CDDB protocol.")
    parser.add_argument("-u", "--username", type=str, default="anon",
                             help="Set the username used to connect to CDDB servers")
    parser.add_argument("-srcroot", "--source_root_folder", type=str, default="./source/",
                             help="Set the folder used to store the source files for ripped CDs (stored as FLAC)")
    parser.add_argument("-libroot", "--library_root_folder", type=str, default="./library/",
                             help="Set the folder used to store converted files")
    parser.add_argument("-of", "--output_format", type=str, default="none",
                             help="Set the output format of converted files. Set to 'none' to disable transcoding")
    parser.add_argument("-oext", "--output_extension", type=str, default=None,
                             help="Set the extension given to converted files. Defaults to the format of the file, but can be changed for codecs like OGG Vorbis/Opus")
    parser.add_argument("--ffmpeg", type=str, default="ffmpeg",
                             help="Set the location of the ffmpeg binary")
    parser.add_argument("-fargs", "--ffmpeg_args", type=str, action="append", default=[],
                             help="Set any extra arguments for the ffmpeg transcoding. Can be used to set quality level or similar")
    parser.add_argument("--rip_only", action="store_true", default=False,
                             help="Set to only rip and generate flac - does not request track info, forces output_format of none")
    parser.add_argument("--rerip", action="store_true", default=False,
                             help="Set if attempting to rip a CD already ripped before")
    parser.add_argument("--device", type=str, default="/dev/cdrom",
                             help="Use <device> rather than /dev/cdrom")
    parser.add_argument("--from_source", type=str, default="",
                             help="Don't fetch from <device>, but use pre-ripped source")
    parser.set_defaults(**defaults)
    args = parser.parse_args(remaining_argv)

    server_config_files = args.server_config_file
    server_config_parser = configparser.SafeConfigParser()
    server_config_parser["DEFAULT"] = {
        "DTitleArtistIndex": 1,
        "DTitleAlbumIndex": 2,
        "TitleRegex": r"(?P<Title>.*)",
        "Encoding": "utf8",
    }
    server_config_parser.read(server_config_files)
    servers = []
    for server_address in server_config_parser.sections():
        server_encodings = [server_config_parser[server_address]["Encoding"]]
        if server_encodings[0].lower() not in ["utf8", "utf-8"]:
            server_encodings.append("utf8")
        servers.append(libturnipripper.CDDB.Server(
            server_address,
            libturnipripper.CDDB.DTitlePattern(
                artist_index = int(server_config_parser[server_address]["DTitleArtistIndex"]),
                album_index = int(server_config_parser[server_address]["DTitleAlbumIndex"])
            ),
            server_encodings
        ))
    if len(servers) == 0:
        print("No servers specified, defaulting to FreeDB...")
    # FreeDB is always used as a fallback, but we tell the user if they haven't specified 
    servers.append(libturnipripper.CDDB.Server("http://freedb.freedb.org/~cddb/cddb.cgi"))

    # Get disc_info from cdrom OR source directory specified
    if args.from_source=="":
        disc_info = libturnipripper.data.get_disc_info(args.device)
        pass
    else:
        disc_info = libturnipripper.data.read_disc_info_from_source(args.source_root_folder, args.from_source)
        pass
    cddb_interfaces = [libturnipripper.CDDB.Interface(server, args.protocol, args.username, "host") for server in servers]

    # Get CD info unless riponly
    print(f"TurnipRipper ripping disc id {disc_info.cddb_id}")
    if args.rip_only:
        cd_info = None
        args.output_format = None
        pass
    else:
        cd_info = select_cd_info_with_user_input(disc_info, cddb_interfaces)
        if not cd_info:
            return
        pass
    
    if args.output_format == "none" or args.output_format == None:
        print ("Transcoding disabled, only ripping")
        source_directory = libturnipripper.ripping.rip_directory(args.source_root_folder, disc_info)
        if os.path.exists(source_directory) and not args.rerip:
            raise Exception(f"Path {source_directory} already exists and not a rerip")
        libturnipripper.ripping.rip_to_subdir(disc_info, None, args.device, args.source_root_folder, args.ffmpeg, force_overwrite=True)
    else:
        print("Ripping and transcoding to {}".format(args.output_format))
        libturnipripper.ripping.rip_and_transcode(disc_info, cd_info, args.device, args.source_root_folder, args.library_root_folder, args.output_format, ffmpeg=args.ffmpeg, extra_options=args.ffmpeg_args, output_ext = args.output_extension)
        
if __name__ == "__main__":
    main()
